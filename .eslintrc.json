/*
  Eslint config file
*/

{
  "env":
  {
    "browser": true,
    "es6": true
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions":
  {
    "project": [ "./tsconfig.json" ],
    "sourceType": "script"
  },
  "plugins":
  [
    "@typescript-eslint"
  ],
  "rules":
  {
      // Require that member overloads be consecutive.
      "@typescript-eslint/adjacent-overload-signatures": "error",
      // Requires using either T[] or Array<T> for arrays.
      // (I like to use both so turn this off.)
      "@typescript-eslint/array-type": "off",
      // Disallows awaiting a value that is not a Thenable.
      // (Sounds reasonable.)
      "@typescript-eslint/await-thenable": "error",
      // Bans “// @ts-<directive>” comments from being used.
      // (We certainly don't want to hide errors so turn this on.)
      "@typescript-eslint/ban-ts-comment": "error",
      // Bans specific types from being used.
      "@typescript-eslint/ban-types":
      [
        "error",
        {
          "types":
          {
            "Object":
            {
              "message": "Avoid using the 'Object' type. Did you mean 'object'?",
              "fixWith": "object"
            },
            "Boolean":
            {
              "message": "Avoid using the 'Boolean' type. Did you mean 'boolean'?",
              "fixWith": "boolean"
            },
            "Function": "Avoid using the 'Function' type. Prefer a specific function type, like '() => void'.",
            "Number":
            {
              "message": "Avoid using the 'Number' type. Did you mean 'number'?",
              "fixWith": "number"
            },
            "String":
            {
              "message": "Avoid using the 'String' type. Did you mean 'string'?",
              "fixWith": "string"
            },
            "Symbol":
            {
              "message": "Avoid using the 'Symbol' type. Did you mean 'symbol'?",
              "fixWith": "symbol"
            }
          }
        }
      ],
      // Disable the base rule as it can report incorrect errors.
      "brace-style": "off",
      // Enforce consistent brace style for blocks.
      // (This is not exactly what I want, some cases should not be allowed.)
      "@typescript-eslint/brace-style":
      [
        "error",
        "allman",
        {
          // Allow single-line functions like getBox() { return this.box; }. 
          "allowSingleLine": true
        }
      ],
      // Disable the base rule as it can report incorrect errors.
      "camelcase": "off",
      // For now this rule is set very laniently.
      "@typescript-eslint/naming-convention":
      [
        "error",  // Not conforming to following rules is an error.
        {
          // Matches any var / let / const variable name.
          "selector": "variable",
          "format": ["camelCase"],
          "leadingUnderscore": "forbid"
        },
        {
          // Matches any function parameter.
          // Does not match parameter properties (whatever that means).
          "selector": "parameter",
          "format": ["camelCase"],
          "leadingUnderscore": "forbid"
        },
        {
          // Matches the same as classProperty, objectLiteralProperty,
          // typeProperty, parameterProperty, classMethod,
          // objectLiteralMethod, typeMethod, accessor, enumMember.
          "selector": "memberLike",
          "modifiers": ["private"],
          "format": ["camelCase"],
          "leadingUnderscore": "forbid"
        },
        {
          // Matches the same as class, interface, typeAlias, enum,
          // typeParameter.
          "selector": "typeLike",
          "format": ["PascalCase"],
          "leadingUnderscore": "forbid"
        },
        {
          // Default naming convention when no other rule applies.
          "selector": "default",
          "format": ["camelCase"],
          "leadingUnderscore": "forbid"
        }
      ],
      // Enforces consistent usage of type assertions.
      "@typescript-eslint/consistent-type-assertions":
      [
        "error",
        {
          "assertionStyle": "as",
          "objectLiteralTypeAssertions": "never"
        }
      ],
      // Allow only use of either 'interface' or 'type'.
      // (Both have their uses so turn this off.)
      "@typescript-eslint/consistent-type-definitions": "off",
      // Disable the rule for all files. If will be enabled specifically
      // for typescript files in "overrides" section.
      "@typescript-eslint/explicit-function-return-type": "off",
      // Disable the rule for all files. If will be enabled specifically
      // for typescript files in "overrides" section.
      "@typescript-eslint/explicit-member-accessibility": "off",
      // Disable the base rule as it can report incorrect errors.
      "func-call-spacing": "off",
      // Require or disallow spacing between function identifiers and
      // their invocations.
      "@typescript-eslint/func-call-spacing": "off",
      // Enforces naming of generic type variables.
      // (We don't enforce prefix for type variables so leave this off.)
      "@typescript-eslint/generic-type-naming": "off",
      // Disable the base rule as it can report incorrect errors.
      "indent": "off",
      // Enforce consistent indentation.
      // (Can't use this now because some indetation rules we use
      //  cannot be configured.)
      "@typescript-eslint/indent": "off",
      // [
      //   "error",
      //   // Indent with 2 spaces.
      //   2,
      //   {
      //     // Enforces indentation level for case clauses in switch statements.
      //     "SwitchCase": 1,
      //     // Enforces indentation level for 'var', 'let' and 'const'
      //     // declarators.
      //     // (Each variable needs to have it's own declarator so indenting
      //     //  is not allowed.)
      //     "VariableDeclarator": "off",
      //     // Enforces indentation level for file-level IIFEs.
      //     "outerIIFEBody": 1,
      //     // Enforces indentation level for multi-line property chains.
      //     "MemberExpression": 1,
      //     // Enforces indentation level for parameters in a function
      //     // declaration.
      //     "FunctionDeclaration":
      //     {
      //       "parameters": 1,
      //       "body": 1
      //     },
      //     // Enforces indentation level for parameters in a function
      //     // expression.
      //     "FunctionExpression":
      //     {
      //       // All arguments of the expression must be aligned with the
      //       // first argument.
      //       "parameters": 1,
      //       "body": 1
      //     },
      //     // Enforces indentation level for arguments in a call expression.
      //     "CallExpression":
      //     {
      //       // All arguments of the expression must be aligned with the
      //       // first argument.
      //       "arguments": 1
      //     },
      //     // Enforces indentation level for elements in arrays.
      //     // (All arguments of the expression must be aligned with the
      //     //  first argument.)
      //     "ArrayExpression": 1,
      //     // Enforces indentation level for properties in objects.
      //     // (All arguments of the expression must be aligned with the
      //     //  first argument.)
      //     "ObjectExpression": 1,
      //     // Enforces indentation level for import statements.
      //     // (All imported members from a module should be aligned
      //     //  with the first member in the list.)
      //     "ImportDeclaration": 1
      //     // (Disable checking of indent for function declaration
      //     //  because function return type indentation cannot be
      //     //  configured.)
      //     // "ignoredNodes": [ "FunctionDeclaration" ]
      //   }
      // ],
      // Require that interface names should or should not be
      // prefixed with 'I'.
      "@typescript-eslint/interface-name-prefix": "off",
      // Require a specific member delimiter style for interfaces
      // and type literals (should there be ',', ';' or nothing
      // after each member of an interface or type).
      "@typescript-eslint/member-delimiter-style":
      [
        "error",
        {
          // Typescript default is ';' but we use ','
          // to make it consistent with object literals
          // (it's easier to remember one style that rules
          //  them all.)
          // There must not be a ',' after the last member
          // because it looks really ugly and unfinished.
          "multiline":
          {
            "delimiter": "comma",
            "requireLast": false
          },
          "singleline":
          {
            "delimiter": "comma",
            "requireLast": false
          }
        }
      ],
      // Enforces naming conventions for class members by visibility
      // (should the private and protected member names be prefixed
      //  with something like '_'?).
      // (No, don't prefix with '_'.)
      "@typescript-eslint/member-naming": "off",
      // Require a consistent member declaration order.
      "@typescript-eslint/member-ordering":
      [
        "error",
        {
          "default":
          [
            // Static part first.
            "public-static-field",
            "protected-static-field",
            "private-static-field",
            "public-static-method",
            "protected-static-method",
            "private-static-method",
            // Intance part second.
            "public-instance-field",
            "protected-instance-field",
            "private-instance-field",
            "public-constructor",
            "protected-constructor",
            "private-constructor",
            // "public-instance-method",
            // "protected-instance-method",
            // "private-instance-method"
            // Don't enforce method order so we can group methods by
            // type (e. g. event handlers) regardless of access.
            "instance-method" 
          ]
        }
      ],
      // Disable the base rule as it can report incorrect errors.
      "no-array-constructor": "off",
      // Disallow generic Array constructors.
      "@typescript-eslint/no-array-constructor": "error",
      // Bans usage of the delete operator with computed key expressions.
      "@typescript-eslint/no-dynamic-delete": "error",
      // Disable the base rule as it can report incorrect errors.
      "no-empty-function": "off",
      // Disallow empty functions.
      "@typescript-eslint/no-empty-function": "error",
      // Disallow the declaration of empty interfaces.
      "@typescript-eslint/no-empty-interface": "error",
      // Disallow usage of the any type.
      "@typescript-eslint/no-explicit-any": "off",
      "@typescript-eslint/no-extra-non-null-assertion": "error",
      // Disable the base rule as it can report incorrect errors.
      "no-extra-parens": "off",
      // Disallow unnecessary parentheses.
      "@typescript-eslint/no-extra-parens": "off",
      /*
      [
        "error",
        "all",
        { "nestedBinaryExpressions": false }
      ],
      */
      // Forbids the use of classes as namespaces.
      "@typescript-eslint/no-extraneous-class": "error",
      // Requires Promise-like values to be handled appropriately.
      "@typescript-eslint/no-floating-promises": "error",
      // Disallow iterating over an array with a for-in loop.
      "@typescript-eslint/no-for-in-array": "error",
      // Disallows explicit type declarations for variables or
      // parameters initialized to a number, string, or boolean.
      "@typescript-eslint/no-inferrable-types": "error",
      // Disable the base rule as it can report incorrect errors.
      "no-magic-numbers": "off",
      // Require use of const variables for explicit values.
      // (This would be nice but it doesn't allow constants in
      //  switch cases so it's too restrictive.)
      "@typescript-eslint/no-magic-numbers": "off",
      // [
      //   "error",
      //   {
      //     // Except for readonly class properties.
      //     "ignoreReadonlyClassProperties": true,
      //     // Except for enum values.
      //     "ignoreEnums": true,
      //     // Except for array indexes.
      //     "ignoreArrayIndexes": true,
      //     // Numbers can only be assigned to 'const' variables.
      //     "enforceConst": true
      //   }
      // ],
      // Enforce valid definition of 'new' and 'constructor'.
      "@typescript-eslint/no-misused-new": "error",
      // Avoid using promises in places not designed to handle them
      "@typescript-eslint/no-misused-promises": "error",
      // Disallow the use of TypeScript modules and namespaces.
      "@typescript-eslint/no-namespace": "off",
      // Disallows non-null assertions using the ! postfix operator.
      // (Using non-null assertions cancels the benefits of the strict
      //  null-checking mode.)
      "@typescript-eslint/no-non-null-assertion": "error",
      // Disallow the use of parameter properties in class constructors.
      "@typescript-eslint/no-parameter-properties": "off",
      // Disallows invocation of require().
      // (require is still needed for some 3rd party modules.)
      "@typescript-eslint/no-require-imports": "off",
      // Disallow aliasing of 'this'.
      // (Use arrow functions instead to capture 'this'.)
      "@typescript-eslint/no-this-alias": "error",
      // Disallow the use of type aliases.
      // (Type definitions are useful so leave this off.)
      "@typescript-eslint/no-type-alias": "off",
      // Prevents conditionals where the type is always truthy or always falsy.
      "@typescript-eslint/no-unnecessary-condition": "error",
      // Warns when a namespace qualifier is unnecessary.
      "@typescript-eslint/no-unnecessary-qualifier": "error",
      // Warns if an explicitly specified type argument is the
      // default for that type parameter.
      "@typescript-eslint/no-unnecessary-type-arguments": "error",
      // Warns if a type assertion does not change the type of an expression.
      "@typescript-eslint/no-unnecessary-type-assertion": "error",
      // Require explicit return and argument types on exported functions' and
      // classes' public class methods.
      "@typescript-eslint/explicit-module-boundary-types": "error",
      // Disable the base rule as it can report incorrect errors.
      "no-unused-expressions": "off",
      // Disallow unused expressions.
      "@typescript-eslint/no-unused-expressions": "error",
      // Disable the base rule as it can report incorrect errors.
      "no-unused-vars": "off",
      // Disallow unused variables.
      // (Typescript warns about this so there is no need to do it twice.)
      "@typescript-eslint/no-unused-vars": "off",
      // [
      //   "warn",
      //   {
      //     // Allow unused arguments to be able to override functions
      //     // with some arguments but empty body.
      //     "args": "none"
      //   }
      // ],
      // Disallow the use of variables before they are defined.
      "@typescript-eslint/no-use-before-define": "off",
      // [
      //   "error",
      //   {
      //     "functions": false,
      //     "classes": true
      //   }
      // ],
      // Disable the base rule as it can report incorrect errors.
      "no-useless-constructor": "off",
      // Disallow unnecessary constructor.
      "@typescript-eslint/no-useless-constructor": "error",
      // Disallows the use of require statements except in import statements.
      "@typescript-eslint/no-var-requires": "error",
      // Prefer a ‘for-of’ loop over a standard ‘for’ loop if the index
      // is only used to access the array being iterated.
      "@typescript-eslint/prefer-for-of": "error",
      // Use function types instead of interfaces with call signatures.
      "@typescript-eslint/prefer-function-type": "error",
      // Enforce includes method over indexOf method.
      "@typescript-eslint/prefer-includes": "error",
      // Require the use of the 'namespace' keyword instead of the 'module'
      // keyword to declare custom TypeScript modules.
      "@typescript-eslint/prefer-namespace-keyword": "error",
      // Enforce the usage of the nullish coalescing operator instead of
      // logical chaining.
      "@typescript-eslint/prefer-nullish-coalescing": "error",
      // Prefer using concise optional chain expressions instead of
      // chained logical ands.
      "@typescript-eslint/prefer-optional-chain": "error",
      // Requires that private members are marked as readonly if they are
      // never modified outside of the constructor.
      "@typescript-eslint/prefer-readonly": "error",
      // Prefer RegExp.exec() over String.match() if no global flag
      // is provided.
      "@typescript-eslint/prefer-regexp-exec": "error",
      // Enforce the use of String.startsWith and String.endsWith
      // instead of other equivalent methods of checking substrings.
      "@typescript-eslint/prefer-string-starts-ends-with": "error",
      // Requires any function or method that returns a Promise to
      // be marked async.
      "@typescript-eslint/promise-function-async": "error",
      // Disable the base rule as it can report incorrect errors.
      "quotes": "off",
      // Enforce the consistent use of either backticks, double,
      // or single quotes.
      "@typescript-eslint/quotes":
      [
        "error",
        "double",
        {
          "allowTemplateLiterals": true
        }
      ],
      // Enforce giving 'compare' argument to Array.sort.
      "@typescript-eslint/require-array-sort-compare": "error",
      // Disable the base rule as it can report incorrect errors
      "require-await": "off",
      // Disallow async functions which have no 'await' expression.
      "@typescript-eslint/require-await": "error",
      // When adding two variables, operands must both be of type number
      // or of type string.
      "@typescript-eslint/restrict-plus-operands": "error",
      // Enforce template literal expressions to be of string type.
      // (This rule is used to prevent automatic conversions of 'null'
      //  or 'undefined' values to production strings.)
      "@typescript-eslint/restrict-template-expressions":
      [
        "error",
        {
          "allowNumber": true
        }
      ],
      // By default, the rule requires awaiting a returned promise in
      // a try-catch-finally block and disallows returning an awaited
      // promise in any other context.
      "@typescript-eslint/return-await": "off",
      // Disable the base rule as it can report incorrect errors.
      "semi": "off",
      // Requires semicolons at the end of statements.
      "@typescript-eslint/semi": "error",
      // Disable the base rule as it can report incorrect errors
      "space-before-function-paren": "off",
      // Enforces consistent spacing before function definition
      // opening parenthesis.
      // (This doesn't allow opening brace on the new line so leave it off.)
      "@typescript-eslint/space-before-function-paren": "off",
      // Restricts the types allowed in boolean expressions.
      // ()
      "@typescript-eslint/strict-boolean-expressions": "off",
      // Sets preference level for triple slash directives versus
      // ES6-style import declarations.
      "@typescript-eslint/triple-slash-reference": "error",
      // Require consistent spacing around type annotations.
      "@typescript-eslint/type-annotation-spacing": "off",
      // Requires type annotations to exist even if they are unnecessary.
      // (This would prevent placing functions return type on
      //  the new line so leave it off.)
      "@typescript-eslint/typedef": "off",
      // Enforces unbound methods are called with their expected scope.
      "@typescript-eslint/unbound-method": "error",
      // Warns for any two overloads that could be unified into one by
      // using a union or an optional/rest parameter.
      "@typescript-eslint/unified-signatures": "error",

      // Enforce 'for' loop update clause moving the counter in the
      // right direction.
      "for-direction": "error",
      // Enforce 'return' statements in getters.
      "getter-return": "error",
      // Disallow using an async function as a Promise executor.
      "no-async-promise-executor": "error",
      // Disallow 'await' inside of loops.
      "no-await-in-loop": "error",
      // Disallow comparing against -0.
      "no-compare-neg-zero":  "error",
      // Disallow assignment operators in conditional expressions.
      "no-cond-assign": "error",
      // Disallow the use of 'console'.
      "no-console": "off",
      // Disallow constant expressions in conditions.
      "no-constant-condition": "error",
      // Disallow control characters in regular expressions.
      "no-control-regex": "off",
      // Disallow the use of 'debugger'.
      "no-debugger": "error",
      // Disallow duplicate arguments in 'function' definitions.
      "no-dupe-args": "error",
      // Disallow duplicate conditions in if-else-if chains.
      "no-dupe-else-if": "error",
      // Disallow duplicate keys in object literals.
      "no-dupe-keys": "error",
      // Disallow duplicate case labels.
      "no-duplicate-case": "error",
      // Disallow empty block statements.
      "no-empty": "error",
      // Disallow empty character classes in regular expressions.
      "no-empty-character-class": "error",
      // Disallow reassigning exceptions in 'catch' clauses.
      "no-ex-assign": "error",
      // Disallow unnecessary boolean casts.
      "no-extra-boolean-cast": "error",
      // Disallow unnecessary semicolons.
      "no-extra-semi": "error",
      // Disallow reassigning 'function' declarations.
      "no-func-assign": "error",
      // Disallow assigning to imported bindings.
      "no-import-assign": "error",
      // Disallow variable or 'function' declarations in nested blocks.
      // (This forbids declaring functions in namespaces so leave it off.)
      "no-inner-declarations": "off",
      // Disallow invalid regular expression strings in 'RegExp' constructors.
      "no-invalid-regexp": "error",
      // Disallow irregular whitespace.
      "no-irregular-whitespace": "error",
      // Disallow characters which are made with multiple code points
      // in character class syntax.
      "no-misleading-character-class": "error",
      // Disallow calling global object properties as functions.
      "no-obj-calls": "error",
      // Disallow calling some 'Object.prototype' methods directly on objects.
      "no-prototype-builtins": "off",
      // Disallow multiple spaces in regular expressions.
      "no-regex-spaces": "error",
      // Disallow returning values from setters.
      "no-setter-return": "error",
      // Disallow sparse arrays.
      "no-sparse-arrays": "error",
      // Disallow template literal placeholder syntax in regular strings.
      "no-template-curly-in-string": "error",
      // Disallow confusing multiline expressions.
      "no-unexpected-multiline": "off",
      
      // Disallow unreachable code after 'return', 'throw', 'continue',
      // and 'break' statements.
      "no-unreachable": "error",
      // Disallow control flow statements in 'finally' blocks.
      "no-unsafe-finally": "error",
      // Disallow negating the left operand of relational operators.
      "no-unsafe-negation": "error",
      // Disallow assignments that can lead to race conditions due
      // to usage of 'await' or 'yield'.
      "require-atomic-updates": "error",
      // Require calls to 'isNaN()'' when checking for 'NaN'.
      "use-isnan": "error",
      // Enforce comparing 'typeof' expressions against valid strings.
      "valid-typeof": "error",


      // Enforce getter and setter pairs in objects and classes.
      "accessor-pairs": "error",
      // Enforce 'return' statements in callbacks of array methods.
      "array-callback-return": "error",
      // Enforce the use of variables within the scope they are defined.
      "block-scoped-var": "error",
      // Enforce that class methods utilize 'this'.
      "class-methods-use-this": "off",
      // Enforce a maximum cyclomatic complexity allowed in a program.
      "complexity": [ "error", 20 ],
      // Require 'return' statements to either always or never specify values.
      // (This is not necessary for typescript.)
      "consistent-return": "off",
      // Enforce consistent brace style for all control statements.
      "curly": "off",
      // Require 'default' cases in 'switch' statements.
      "default-case": "error",
      // Enforce default parameters to be last.
      "default-param-last": "error",
      // Enforce consistent newlines before and after dots.
      "dot-location": [ "error", "property" ],
      // Enforce dot notation whenever possible.
      "dot-notation": "error",
      // Require the use of '===' and '!=='.
      "eqeqeq": "error",
      // Require grouped accessor pairs in object literals and classes.
      "grouped-accessor-pairs": [ "error", "getBeforeSet" ],
      // Require 'for-in' loops to include an 'if' statement.
      "guard-for-in": "error",
      // Enforce a maximum number of classes per file.
      "max-classes-per-file": [ "error", 1 ],
      // Disallow the use of 'alert', 'confirm', and 'prompt'.
      "no-alert": "warn",
      // Disallow the use of 'arguments.caller' or 'arguments.callee'.
      "no-caller": "error",
      // Disallow lexical declarations in case clauses.
      "no-case-declarations": "error",
      // Disallow returning value from constructor.
      "no-constructor-return": "error",
      // Disallow division operators explicitly at the beginning of regular
      // expressions.
      "no-div-regex": "error",
      // Disallow 'else' blocks after 'return' statements in 'if' statements.
      "no-else-return": ["error", { "allowElseIf": false } ],
      // Disallow empty destructuring patterns.
      "no-empty-pattern": "error",
      // Disallow 'null' comparisons without type-checking operators.
      "no-eq-null": "error",
      // Disallow the use of 'eval()'.
      "no-eval": "error",
      // Disallow extending native types.
      "no-extend-native": "off",
      // Disallow unnecessary calls to '.bind()'.
      "no-extra-bind": "error",
      // Disallow unnecessary labels.
      "no-extra-label": "error",
      // Disallow fallthrough of 'case' statements.
      "no-fallthrough": "error",
      // Disallow leading or trailing decimal points in numeric literals.
      "no-floating-decimal": "error",
      // Disallow assignments to native objects or read-only global variables.
      "no-global-assign": "error",
      // Disallow shorthand type conversions.
      "no-implicit-coercion": "error",
      // Disallow declarations in the global scope.
      "no-implicit-globals": "error",
      // Disallow the use of 'eval()'-like methods.
      "no-implied-eval": "error",
      // Disallow 'this' keywords outside of classes or class-like objects.
      "no-invalid-this": "error",
      // Disallow the use of the '__iterator__' property.
      "no-iterator": "error",
      // Disallow labeled statements.
      "no-labels": "error",
      // Disallow unnecessary nested blocks.
      "no-lone-blocks": "error",
      // Disallow function declarations that contain unsafe references inside
      // loop statements.
      "no-loop-func": "error",
      // Disallow multiple spaces.
      "no-multi-spaces": [ "error", { "ignoreEOLComments": true } ],
      // Disallow multiline strings.
      "no-multi-str": "error",
      // Disallow 'new' operators outside of assignments or comparisons.
      "no-new": "error",
      // Disallow 'new' operators with the 'Function' object.
      "no-new-func": "error",
      // Disallow 'new' operators with the 'String', 'Number', and 'Boolean'
      // objects.
      "no-new-wrappers": "error",
      // Disallow octal literals.
      "no-octal": "error",
      // Disallow octal escape sequences in string literals.
      "no-octal-escape": "error",
      // Disallow reassigning 'function' parameters.
      // (This is hard decision. Disallowing parameter reassignemnt can
      //  help prevent errors when working with 'arguments' object. On
      //  the other hand it hampers code readability because in order
      //  to work with a value of parameter without reassignment you
      //  have to to come up with second name to the same thing. Since
      //  working with 'arguments' is very rare and hampering readability
      //  is quite common, let's turn this off.)
      "no-param-reassign": "off",
      // Disallow the use of the '__proto__' property.
      "no-proto": "error",
      // Disallow variable redeclaration.
      // (This unfortunately also prevents declaring namespace with the same
      //  name as class which is used to declare types within class so it must
      //  be turned off).
      "no-redeclare": "off",
      // Disallow certain properties on certain objects.
      "no-restricted-properties": "off",
      // Disallow assignment operators in 'return' statements.
      "no-return-assign": "error",
      // Disallow unnecessary 'return await'.
      "no-return-await": "error",
      // Disallow 'javascript:' urls.
      "no-script-url": "error",
      // Disallow assignments where both sides are exactly the same.
      "no-self-assign": "error",
      // Disallow comparisons where both sides are exactly the same.
      "no-self-compare": "error",
      // Disallow comma operators.
      "no-sequences": "error",
      // Disallow throwing literals as exceptions.
      "no-throw-literal": "error",
      // Disallow unmodified loop conditions.
      "no-unmodified-loop-condition": "error",
      // Disallow unused labels.
      "no-unused-labels": "error",
      // Disallow unnecessary calls to '.call()' and '.apply()'.
      "no-useless-call": "error",
      // Disallow unnecessary 'catch' clauses.
      "no-useless-catch": "error",
      // Disallow unnecessary concatenation of literals or template literals.
      "no-useless-concat": "error",
      // Disallow unnecessary escape characters.
      "no-useless-escape": "error",
      // Disallow redundant return statements.
      "no-useless-return": "error",
      // Disallow 'void' operators.
      "no-void": "error",
      // Disallow specified warning terms in comments.
      "no-warning-comments":
      [
        "warn",
        {
          "terms": [ "todo", "fixme", "test", "debug" ]
        }
      ],
      // Disallow 'with' statements.
      "no-with": "error",
      // Enforce using named capture group in regular expression.
      "prefer-named-capture-group": "error",
      // Require using Error objects as Promise rejection reasons.
      "prefer-promise-reject-errors": "error",
      // Disallow use of the 'RegExp' constructor in favor of regular
      // expression literals.
      // (Using 'new RegExp("...") is more readable, so leave this off').
      "prefer-regex-literals": "off",
      // Enforce the consistent use of the radix argument when using
      // 'parseInt()'.
      "radix": "error",
      // Enforce the use of 'u' flag on RegExp.
      "require-unicode-regexp": "error",
      // Require 'var' declarations be placed at the top of their containing
      // scope.
      "vars-on-top": "error",
      // Require parentheses around immediate 'function' invocations.
      "wrap-iife": "error",
      // Require or disallow "Yoda" conditions.
      "yoda": "error",
      // Require or disallow strict mode directives.
      // (Disallow them because they are not needed when using typescript
      //  strict mode.)
      "strict": [ "error", "never" ],

      // Require initialization in variable declarations.
      "init-declarations": "off",
      // Disallow deleting variables.
      "no-delete-var": "error",
      // Disallow labels that share a name with a variable.
      "no-label-var": "error",
      // Disallow specified global variables.
      "no-restricted-globals": "off",
      // Disallow variable declarations from shadowing variables declared
      // in the outer scope.
      // (Variables like 'WebSocket' need to be shadowed so leave this off.)
      "no-shadow":
      [
        "error",
        {
          "builtinGlobals": false,
          "hoist": "functions"
        }
      ],
      // Disallow identifiers from shadowing restricted names.
      "no-shadow-restricted-names": "error",
      // Disallow the use of undeclared variables unless mentioned in
      // '/* global */' comments.
      "no-undef": "off",
      // Disallow initializing variables to 'undefined'.
      "no-undef-init": "error",
      // Disallow the use of 'undefined' as an identifier.
      // (We do want to use 'undefined', so leave this off.)
      "no-undefined": "off",
      // Disallow the use of variables before they are defined.
      // (We use "no-var" rule instead.)
      "no-use-before-define": "off",

      // Require 'return' statements after callbacks.
      "callback-return": "error",
      // Require 'require()' calls to be placed at top-level module scope.
      "global-require": "error",
      // Require error handling in callbacks.
      "handle-callback-err": "error",
      // Disallow use of the 'Buffer()' constructor.
      "no-buffer-constructor": "error",
      // Disallow 'require' calls to be mixed with regular variable declarations.
      "no-mixed-requires": "error",
      // Disallow 'new' operators with calls to 'require'.
      "no-new-require": "error",
      // Disallow string concatenation with '__dirname' and '__filename'.
      "no-path-concat": "error",
      // Disallow the use of 'process.env'.
      "no-process-env": "error",
      // Disallow the use of 'process.exit()'.
      "no-process-exit": "error",
      // Disallow specified modules when loaded by 'require'.
      "no-restricted-modules": "off",
      // Disallow synchronous methods.
      "no-sync": "error",

      // Enforce linebreaks after opening and before closing array brackets.
      "array-bracket-newline": [ "error", "consistent" ],
      // Enforce consistent spacing inside array brackets.
      "array-bracket-spacing": [ "error", "always" ],
      // Enforce line breaks after each array element.
      "array-element-newline": [ "error", "consistent" ],
      // Disallow or enforce spaces inside of blocks after opening block
      // and before closing block.
      "block-spacing": [ "error", "always" ],
      // Enforce or disallow capitalization of the first letter of a comment.
      // (This would prevent commenting-out code so leave it off.)
      "capitalized-comments": "off",
      // [
      //   "error",
      //   "always",
      //   {
      //     "line":
      //     {
      //       "ignoreConsecutiveComments": true
      //     }
      //   }
      // ],
      // Require or disallow trailing commas.
      "comma-dangle": "error",
      // Enforce consistent spacing before and after commas.
      "comma-spacing": "error",
      // Enforce consistent comma style.
      "comma-style": [ "error", "last" ],
      // Enforce consistent spacing inside computed property brackets.
      "computed-property-spacing": [ "error", "never" ],
      // Enforce consistent naming when capturing the current execution
      // context.
      // (Prefer capturing this using arrow functions.)
      "consistent-this": "off",
      // Require or disallow newline at the end of files.
      "eol-last": [ "error", "never" ],

      // Require function names to match the name of the variable or property
      // to which they are assigned.
      "func-name-matching": "error",
      // Require or disallow named 'function' expressions.
      "func-names": [ "error", "as-needed" ],
      // Enforce the consistent use of either 'function' declarations or
      // expressions.
      "func-style": [ "error", "declaration" ],
      // Enforce line breaks between arguments of a function call.
      "function-call-argument-newline": [ "error", "consistent" ],
      // Enforce consistent line breaks inside function parentheses.
      "function-paren-newline": [ "error", "multiline-arguments" ],
      // Disallow specified identifiers.
      "id-blacklist": "off",
      // Enforce minimum and maximum identifier lengths.
      // (I'm probably guilty as charged with too long identifiers,
      //  so let's limit this somewhat.)
      "id-length": [ "error", { "min": 1, "max": 30 } ],
      // Require identifiers to match a specified regular expression.
      "id-match": "off",
      // Enforce the location of arrow function bodies.
      "implicit-arrow-linebreak": "off",
      // Enforce the consistent use of either double or single quotes
      // in JSX attributes.
      "jsx-quotes": [ "error", "prefer-double" ],
      // Enforce consistent spacing between keys and values in object
      // literal properties.
      "key-spacing":
      [
        "error",
        {
          "beforeColon": false,
          "afterColon": true,
          "mode": "strict"
        }
      ],
      // Enforce consistent spacing before and after keywords.
      "keyword-spacing": "error",
      // Enforce position of line comments.
      "line-comment-position": "off",
      // Enforce consistent linebreak style.
      "linebreak-style": [ "error", "unix" ],
      // Require empty lines around comments.
      // (This would prevent commenting-out code so leave it off.)
      "lines-around-comment": "off",
      // [
      //   "error",
      //   {
      //     "beforeBlockComment": true,
      //     "afterBlockComment": true,
      //     "beforeLineComment": true,
      //     "allowBlockStart": true,
      //     "allowBlockEnd": true,
      //     "allowClassStart": true,
      //     "allowClassEnd": true
      //   }
      // ],
      // Require or disallow an empty line between class members.
      "lines-between-class-members":
      [
        "error",
        "always",
        {
          "exceptAfterSingleLine": true
        }
      ],
      // Enforce a maximum depth that blocks can be nested.
      "max-depth": [ "error", 4 ],
      // Enforce a maximum line length.
      "max-len":
      [
        "error",
        {
          "code": 79,
          "comments": 79
        }
      ],
      // Enforce a maximum number of lines per file.
      "max-lines": [ "warn", 2000 ],
      // Enforce a maximum number of line of code in a function.
      "max-lines-per-function":
      [
        "warn",
        {
          "max": 50,
          "skipBlankLines": true,
          "skipComments": true
        }
      ],
      // Enforce a maximum depth that callbacks can be nested.
      "max-nested-callbacks": [ "error", { "max": 1 } ],
      // Enforce a maximum number of parameters in function definitions.
      "max-params": [ "error", { "max": 5 } ],
      // Enforce a maximum number of statements allowed in function blocks.
      "max-statements": [ "error", { "max": 15 } ],
      // Enforce a maximum number of statements allowed per line.
      "max-statements-per-line": [ "error", { "max": 2 } ],
      // Enforce a particular style for multiline comments.
      // (None of the options is useful.)
      "multiline-comment-style": "off",
      // Enforce newlines between operands of ternary expressions.
      "multiline-ternary": [ "error", "always-multiline" ],
      // Require constructor names to begin with a capital letter.
      "new-cap":
      [
        "error",
        {
          "newIsCapExceptionPattern": "^Express$",
          "capIsNewExceptionPattern": "^Express$"
        }
      ],
      // Enforce or disallow parentheses when invoking a constructor
      // with no arguments.
      "new-parens": "error",
      // Require a newline after each call in a method chain.
      "newline-per-chained-call": "off",
      // Disallow bitwise operators.
      "no-bitwise": "error",
      // Disallow 'continue' statements.
      "no-continue": "off",
      // Disallow inline comments after code.
      "no-inline-comments": "off",
      // Disallow 'if' statements as the only statement in 'else' blocks.
      "no-lonely-if": "error",
      // Disallow mixed binary operators.
      "no-mixed-operators": "error",
      // Disallow mixed spaces and tabs for indentation.
      "no-mixed-spaces-and-tabs": "error",
      // Disallow use of chained assignment expressions.
      "no-multi-assign": "error",
      // Disallow multiple empty lines.
      "no-multiple-empty-lines":
      [
        "warn",
        {
          "max": 1,
          "maxEOF": 0,
          "maxBOF": 0
        }
      ],
      // Disallow negated conditions.
      "no-negated-condition": "error",
      // Disallow nested ternary expressions.
      "no-nested-ternary": "error",
      // Disallow 'Object' constructors.
      "no-new-object": "error",
      // Disallow the unary operators '++' and '--'.
      "no-plusplus": "off",
      // Disallow specified syntax.
      "no-restricted-syntax": "off",
      // Disallow all tabs.
      "no-tabs": "error",
      // Disallow ternary operators.
      "no-ternary": "off",
      // Disallow trailing whitespace at the end of lines.
      "no-trailing-spaces": "error",
      // Disallow dangling underscores in identifiers.
      "no-underscore-dangle": "error",
      // Disallow ternary operators when simpler alternatives exist.
      "no-unneeded-ternary": "error",
      // Disallow whitespace before properties.
      "no-whitespace-before-property": "error",
      // Enforce the location of single-line statements.
      "nonblock-statement-body-position": [ "error", "below" ],
      // Enforce consistent line breaks inside braces.
      // (This rule doesn't work well for default values so leave it off.)
      "object-curly-newline": "off",
      // [
      //   "error",
      //   {
      //     "multiline": true
      //   }
      // ],
      // Enforce consistent spacing inside braces.
      "object-curly-spacing": [ "error", "always" ],
      // Enforce placing object properties on separate lines.
      "object-property-newline":
      [
        "error",
        {
          "allowAllPropertiesOnSameLine": true
        }
      ],
      // Enforce variables to be declared either together or separately
      // in functions.
      "one-var": [ "error", "never" ],
      // Require or disallow newlines around variable declarations.
      "one-var-declaration-per-line": [ "error", "always" ],
      // Require or disallow assignment operator shorthand where possible.
      "operator-assignment": "error",
      // Enforce consistent linebreak style for operators.
      "operator-linebreak":
      [
        "error",
        "before",
        {
          "overrides": { "?": "after", "=": "after" }
        }
      ],
      // Require or disallow padding within blocks.
      "padded-blocks": [ "error", "never" ],
      // Require or disallow padding lines between statements.
      "padding-line-between-statements":
      [
        "error",
        {
          // Require empty lne after 'let', 'const' or 'var'.
          "blankLine": "always",
          "prev": [ "const", "let", "var" ],
          "next": "*"
        },
        {
          // Unless another 'let', 'const' or 'var' follows
          "blankLine": "any",
          "prev": [ "const", "let", "var" ],
          "next": [ "const", "let", "var" ]
        },
        {
          // Require empty line after 'break' if 'case' or 'default' follows.
          "blankLine": "always",
          "prev": "break",
          "next": [ "case", "default" ]
        }
      ],
      // Disallow the use of 'Math.pow' in favor of the '**' operator.
      "prefer-exponentiation-operator": "error",
      // Disallow using Object.assign with an object literal as the first
      // argument and prefer the use of object spread instead..
      "prefer-object-spread": "error",
      // Require quotes around object literal property names.
      "quote-props":
      [
        "error",
        "consistent-as-needed",
        {
          "numbers": true
        }
      ],
      // Enforce consistent spacing before and after semicolons.
      "semi-spacing":
      [
        "error",
        {
          "before": false,
          "after": true
        }
      ],
      // Enforce location of semicolons.
      "semi-style": [ "error", "last" ],
      // Require object keys to be sorted.
      "sort-keys": "off",
      // Require variables within the same declaration block to be sorted.
      "sort-vars": "off",
      // Enforce consistent spacing before blocks.
      "space-before-blocks": [ "error", "always" ],
      // Enforce consistent spacing before 'function' definition opening
      // parenthesis.
      "space-in-parens": [ "error", "never" ],
      // Require spacing around infix operators.
      "space-infix-ops": "error",
      // Enforce consistent spacing before or after unary operators.
      "space-unary-ops":
      [
        "error",
        {
          "words": true,
          "nonwords": false
        }
      ],
      // Enforce consistent spacing after the '//' or '/*' in a comment.
      "spaced-comment":
      [
        "error",
        "always",
        {
          "markers": ["/"]
        }
      ],
      // Enforce spacing around colons of switch statements.
      "switch-colon-spacing": [ "error", { "after": true, "before": false } ],
      // Require or disallow spacing between template tags and their literals.
      "template-tag-spacing": [ "error", "always" ],
      // Require or disallow Unicode byte order mark (BOM).
      "unicode-bom": [ "error", "never" ],
      // Require parenthesis around regex literals.
      "wrap-regex": "error",


      // Require braces around arrow function bodies.
      "arrow-body-style": [ "error", "always" ],
      // Require parentheses around arrow function arguments.
      "arrow-parens": [ "error", "always" ],
      // Enforce consistent spacing before and after the arrow in arrow
      // functions.
      "arrow-spacing": "error",
      // Require 'super()' calls in constructors.
      "constructor-super": "error",
      // Enforce consistent spacing around '*' operators in generator
      // functions.
      "generator-star-spacing": [ "error", "before" ],
      // Disallow reassigning class members.
      "no-class-assign": "error",
      // Disallow arrow functions where they could be confused with
      // comparisons.
      "no-confusing-arrow": "error",
      // Disallow reassigning 'const' variables.
      "no-const-assign": "error",
      // Disallow duplicate class members.
      "no-dupe-class-members": "error",
      // Disallow duplicate module imports.
      "no-duplicate-imports": "error",
      // Disallow 'new' operators with the 'Symbol' object.
      "no-new-symbol": "error",
      // Disallow specified modules when loaded by 'import'.
      "no-restricted-imports": "off",
      // Disallow 'this'/'super' before calling 'super()' in constructors.
      "no-this-before-super": "error",
      // Disallow unnecessary computed property keys in objects and classes.
      "no-useless-computed-key": "error",
      // Require 'let' or 'const' instead of 'var'.
      "no-useless-rename": "error",
      // Require 'let' or 'const' instead of 'var'.
      "no-var": "error",
      // Require or disallow method and property shorthand syntax for object
      // literals.
      "object-shorthand": "error",
      // Require using arrow functions for callbacks.
      "prefer-arrow-callback": "error",
      // Require 'const' declarations for variables that are never reassigned
      // after declared.
      "prefer-const": "error",
      // Require destructuring from arrays and/or objects.
      "prefer-destructuring": "off",
      // Disallow 'parseInt()' and 'Number.parseInt()' in favor of binary,
      // octal, and hexadecimal literals.
      "prefer-numeric-literals": "error",
      // Require rest parameters instead of 'arguments'.
      "prefer-rest-params": "error",
      // Require spread operators instead of '.apply()'.
      "prefer-spread": "error",
      // Require template literals instead of string concatenation.
      "prefer-template": "error",
      // Require generator functions to contain 'yield'.
      "require-yield": "error",
      // Enforce spacing between rest and spread operators and their
      // expressions.
      "rest-spread-spacing": "error",
      // Enforce sorted import declarations within modules.
      "sort-imports": "off",
      // Require symbol descriptions.
      "symbol-description": "error",
      // Require or disallow spacing around embedded expressions of template
      // strings.
      "template-curly-spacing": "error",
      // Require or disallow spacing around the '*' in 'yield*' expressions.
      "yield-star-spacing": [ "error", "before" ]
  },
  "overrides":
  [
    {
      // Enable following rule specifically for TypeScript files
      "files": ["*.ts", "*.tsx"],
      "rules":
      {
        // Require explicit return types on functions and class methods.
        "@typescript-eslint/explicit-function-return-type":
        [
          "error",
          {
            "allowExpressions": true,
            "allowTypedFunctionExpressions": true,
            "allowHigherOrderFunctions": true
          }
        ],
        // Require explicit accessibility modifiers on class properties
        // and methods.
        "@typescript-eslint/explicit-member-accessibility":
        [
          "error",
          {
            "overrides":
            {
              // Do not require 'public' in front of 'constructor' because
              // vast majority of constructors are public so it would only
              // add clutter.
              "constructors": "no-public"
            }
          }
        ]
      }
    }
  ]
}